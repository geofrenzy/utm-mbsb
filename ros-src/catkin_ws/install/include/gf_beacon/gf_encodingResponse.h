// Generated by gencpp from file gf_beacon/gf_encodingResponse.msg
// DO NOT EDIT!


#ifndef GF_BEACON_MESSAGE_GF_ENCODINGRESPONSE_H
#define GF_BEACON_MESSAGE_GF_ENCODINGRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gf_beacon
{
template <class ContainerAllocator>
struct gf_encodingResponse_
{
  typedef gf_encodingResponse_<ContainerAllocator> Type;

  gf_encodingResponse_()
    : encoded()  {
    }
  gf_encodingResponse_(const ContainerAllocator& _alloc)
    : encoded(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _encoded_type;
  _encoded_type encoded;




  typedef boost::shared_ptr< ::gf_beacon::gf_encodingResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gf_beacon::gf_encodingResponse_<ContainerAllocator> const> ConstPtr;

}; // struct gf_encodingResponse_

typedef ::gf_beacon::gf_encodingResponse_<std::allocator<void> > gf_encodingResponse;

typedef boost::shared_ptr< ::gf_beacon::gf_encodingResponse > gf_encodingResponsePtr;
typedef boost::shared_ptr< ::gf_beacon::gf_encodingResponse const> gf_encodingResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gf_beacon::gf_encodingResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gf_beacon::gf_encodingResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace gf_beacon

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::gf_beacon::gf_encodingResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gf_beacon::gf_encodingResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gf_beacon::gf_encodingResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gf_beacon::gf_encodingResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gf_beacon::gf_encodingResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gf_beacon::gf_encodingResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gf_beacon::gf_encodingResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d37e4f1e46761defdf5b003341acd010";
  }

  static const char* value(const ::gf_beacon::gf_encodingResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd37e4f1e46761defULL;
  static const uint64_t static_value2 = 0xdf5b003341acd010ULL;
};

template<class ContainerAllocator>
struct DataType< ::gf_beacon::gf_encodingResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gf_beacon/gf_encodingResponse";
  }

  static const char* value(const ::gf_beacon::gf_encodingResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gf_beacon::gf_encodingResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string encoded\n\
\n\
";
  }

  static const char* value(const ::gf_beacon::gf_encodingResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gf_beacon::gf_encodingResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.encoded);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gf_encodingResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gf_beacon::gf_encodingResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gf_beacon::gf_encodingResponse_<ContainerAllocator>& v)
  {
    s << indent << "encoded: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.encoded);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GF_BEACON_MESSAGE_GF_ENCODINGRESPONSE_H
