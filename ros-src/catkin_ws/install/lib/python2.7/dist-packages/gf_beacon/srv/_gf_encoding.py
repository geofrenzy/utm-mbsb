# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gf_beacon/gf_encodingRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class gf_encodingRequest(genpy.Message):
  _md5sum = "b4f5ff271c45bb829d5e504e08e16e34"
  _type = "gf_beacon/gf_encodingRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 lng_deg
float64 lat_deg
float64 alt_agl_m
float64 speed_mph
float64 heading_deg
float64 battery_level
uint16 flying_state_on
uint16 return_to_home_state_on
uint16 forced_landing_state_on
"""
  __slots__ = ['lng_deg','lat_deg','alt_agl_m','speed_mph','heading_deg','battery_level','flying_state_on','return_to_home_state_on','forced_landing_state_on']
  _slot_types = ['float64','float64','float64','float64','float64','float64','uint16','uint16','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       lng_deg,lat_deg,alt_agl_m,speed_mph,heading_deg,battery_level,flying_state_on,return_to_home_state_on,forced_landing_state_on

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(gf_encodingRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.lng_deg is None:
        self.lng_deg = 0.
      if self.lat_deg is None:
        self.lat_deg = 0.
      if self.alt_agl_m is None:
        self.alt_agl_m = 0.
      if self.speed_mph is None:
        self.speed_mph = 0.
      if self.heading_deg is None:
        self.heading_deg = 0.
      if self.battery_level is None:
        self.battery_level = 0.
      if self.flying_state_on is None:
        self.flying_state_on = 0
      if self.return_to_home_state_on is None:
        self.return_to_home_state_on = 0
      if self.forced_landing_state_on is None:
        self.forced_landing_state_on = 0
    else:
      self.lng_deg = 0.
      self.lat_deg = 0.
      self.alt_agl_m = 0.
      self.speed_mph = 0.
      self.heading_deg = 0.
      self.battery_level = 0.
      self.flying_state_on = 0
      self.return_to_home_state_on = 0
      self.forced_landing_state_on = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6d3H().pack(_x.lng_deg, _x.lat_deg, _x.alt_agl_m, _x.speed_mph, _x.heading_deg, _x.battery_level, _x.flying_state_on, _x.return_to_home_state_on, _x.forced_landing_state_on))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 54
      (_x.lng_deg, _x.lat_deg, _x.alt_agl_m, _x.speed_mph, _x.heading_deg, _x.battery_level, _x.flying_state_on, _x.return_to_home_state_on, _x.forced_landing_state_on,) = _get_struct_6d3H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6d3H().pack(_x.lng_deg, _x.lat_deg, _x.alt_agl_m, _x.speed_mph, _x.heading_deg, _x.battery_level, _x.flying_state_on, _x.return_to_home_state_on, _x.forced_landing_state_on))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 54
      (_x.lng_deg, _x.lat_deg, _x.alt_agl_m, _x.speed_mph, _x.heading_deg, _x.battery_level, _x.flying_state_on, _x.return_to_home_state_on, _x.forced_landing_state_on,) = _get_struct_6d3H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6d3H = None
def _get_struct_6d3H():
    global _struct_6d3H
    if _struct_6d3H is None:
        _struct_6d3H = struct.Struct("<6d3H")
    return _struct_6d3H
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gf_beacon/gf_encodingResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class gf_encodingResponse(genpy.Message):
  _md5sum = "d37e4f1e46761defdf5b003341acd010"
  _type = "gf_beacon/gf_encodingResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string encoded

"""
  __slots__ = ['encoded']
  _slot_types = ['string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       encoded

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(gf_encodingResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.encoded is None:
        self.encoded = ''
    else:
      self.encoded = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.encoded
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.encoded = str[start:end].decode('utf-8')
      else:
        self.encoded = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.encoded
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.encoded = str[start:end].decode('utf-8')
      else:
        self.encoded = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
class gf_encoding(object):
  _type          = 'gf_beacon/gf_encoding'
  _md5sum = '916bededc1f7b96442f9b7ace1020840'
  _request_class  = gf_encodingRequest
  _response_class = gf_encodingResponse
